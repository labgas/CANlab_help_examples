%%% c2a_second_level_regression.m

% USAGE
%
% This script displays second‚Åªlevel (i.e. across subjects) regression
% results generated by prep_3a_run_second_level_regression_and_save.m
%
% Use Matlab's publish function to generate html report
% 
% See the documentation of prep_3a_run_second_level_regression_and_save.m
% for more info and options
%
%__________________________________________________________________________
%
% revamped by: Lukas Van Oudenhove
% date:   Dartmouth, May, 2022
%
%__________________________________________________________________________
% @(#)% c2a_second_level_regression.m         v2.0
% last modified: 2022/05/27


%% LOAD REGRESSION RESULTS IF NEEDED
%--------------------------------------------------------------------------

% conditions or contrasts

mygroupnamefield = 'contrasts'; 

% check scaling

switch myscaling_glm

    case 'raw'
        printstr('contrast calculated on raw (unscaled) condition images used in second-level GLM');
        scaling_string = 'no_scaling';
        cat_obj = DATA_OBJ_CON{c};
        if imgs_nan
            cat_obj = cat_obj.get_wh_image(imgs_nan);
        end

    case 'scaled'
        printstr('contrast calculated on z-scored condition images used in second-level GLM');
        scaling_string = 'scaling_z_score_conditions';
        cat_obj = DATA_OBJ_CONsc{c};
        if imgs_nan
            cat_obj = cat_obj.get_wh_image(imgs_nan);
        end

    case 'scaled_contrasts'
        printstr('l2norm scaled contrast images used in second-level GLM');
        scaling_string = 'scaling_l2norm_contrasts';
        cat_obj = DATA_OBJ_CONscc{c};
        if imgs_nan
            cat_obj = cat_obj.get_wh_image(imgs_nan);
        end

    otherwise
        error('invalid option "%s" defined in myscaling_glm variable in a2_set_default_options script, choose between "raw", "scaled", or "scaled_contrast" given option "%s" defined in mygroupnamefield variable', myscaling_glm, mygroupnamefield);

end

% check whether results are available, load if needed

if ~exist('regression_stats_results', 'var')
    savefilenamedata = fullfile(resultsdir, ['regression_stats_and_maps_', mygroupnamefield, '_', scaling_string,'.mat']);
        if exist(savefilenamedata,'file')
            fprintf('\nLoading regression results and maps from %s\n\n', savefilenamedata);
            load(savefilenamedata,'regression_stats_results');
        else
            fprintf('\nNo saved results file %s. Skipping this analysis.', savefilenamedata)
            fprintf('\nRun prep_3a_run_second_level_regression_and_save.m to get regression results.'); 
            return
        end
else
    fprintf('\nregression_stats_results found, displaying results');
end



%% MASKING
%--------------------------------------------------------------------------

if exist(maskname_glm, 'file')
    apply_mask_before_fdr = true;
    [~,maskname_short] = fileparts(maskname_glm);
    mask_string = sprintf('within mask %s', maskname_short);
    mask = fmri_data_st(maskname_glm, 'noverbose'); 
else
    apply_mask_before_fdr = false;
    mask_string = sprintf('without masking');
end  


%% MASS UNIVARIATE CONTRASTS WHOLE BRAIN
%--------------------------------------------------------------------------

for c = 1:size(regression_stats_results, 2) % number of contrasts or conditions

    analysisname = regression_stats_results{c}.analysis_name;
    names = regression_stats_results{c}.variable_names;
    t = regression_stats_results{c}.t;
    
    printhdr(analysisname)
    disp('Regressors: ')
    disp(names)
    
    if isfield(regression_stats_results{c}, 'design_table')
        disp(regression_stats_results{c}.design_table);
    end
    
    num_effects = size(t.dat, 2); % number of regressors
    
    % BETWEEN-SUBJECT REGRESSORS & INTERCEPT: montage at 0.05 FDR corrected
    % ---------------------------------------------------------------------
    o2 = canlab_results_fmridisplay([], 'multirow', num_effects);
    
    for j = 1:num_effects
        
        fprintf ('\nShowing results at FDR q < 0.05: %s\nEffect: %s, %s\n\n', analysisname, names{j}, mask_string);
        
        tj = get_wh_image(t, j);
            if apply_mask_before_fdr
                tj = apply_mask(tj, mask);
            end
        tj = threshold(tj, .05, 'fdr'); 
        
        o2 = addblobs(o2, region(tj), 'wh_montages', (2*j)-1:2*j);
        o2 = title_montage(o2, 2*j, [analysisname ' ' names{j}]);
        
    end
    
    figtitle = sprintf('%s_05_FDR_montage_%s_%s', analysisname, scaling_string, mask_string);
    set(gcf, 'Tag', figtitle);
    drawnow, snapnow;
        if save_figures
            plugin_save_figure;
        end
    clear o2, clear figtitle
    
    for j = 1:num_effects
        
        fprintf('\n\nTable of results for clusters >= 5 contiguous voxels.');
        
        tj = get_wh_image(t, j);
            if apply_mask_before_fdr
                tj = apply_mask(tj, mask);
            end
        tj = threshold(tj, .05, 'fdr'); 
        
        r = region(tj, 'noverbose');
        r(cat(1, r.numVox) < 5) = [];                   % r = extent_threshold(r);
        [rpos, rneg] = table(r);       % add labels
        r = [rpos rneg];               % re-concatenate labeled regions

        % Montage of regions in table (plot and save)
        if ~isempty(r)
            o3 = montage(r, 'colormap', 'regioncenters');

            % Activate, name, and save figure - then close
            figtitle = sprintf('%s_05_FDR_regions_%s_%s_%s', analysisname, names{j}, scaling_string, mask_string);
            region_fig_han = activate_figures(o3);
            if ~isempty(region_fig_han)
                set(region_fig_han{1}, 'Tag', figtitle);
                drawnow, snapnow;
                    if save_figures
                        plugin_save_figure;
                    end
                close(region_fig_han{1}), clear o3, clear figtitle
            else
                disp('Cannot find figure - Tag field was not set or figure was closed. Skipping save operation.');
            end

        end % end conditional montage plot if there are regions to show
    end

    
    % BETWEEN-SUBJECT REGRESSORS & INTERCEPT: montage at 0.01 uncorrected
    % ---------------------------------------------------------------------    
    o2 = canlab_results_fmridisplay([], 'multirow', num_effects);
    
    for j = 1:num_effects
        
        fprintf ('\nShowing results at uncorrected p < 0.01: %s\nEffect: %s, %s\n\n', analysisname, names{j}, mask_string);
        
        tj = get_wh_image(t, j);
            if apply_mask_before_fdr
                tj = apply_mask(tj, mask);
            end
        tj = threshold(tj, .01, 'unc'); 
        
        o2 = addblobs(o2, region(tj), 'wh_montages', (2*j)-1:2*j);
        o2 = title_montage(o2, 2*j, [analysisname ' ' names{j}]);
    end
    
    figtitle = sprintf('%s_01_unc_montage_%s_%s', analysisname, scaling_string, mask_string);
    set(gcf, 'Tag', figtitle);
    drawnow, snapnow;
        if save_figures
            plugin_save_figure;
        end
    clear o2, clear figtitle
        
    for j = 1:num_effects
        
        fprintf('\n\nTable of results for clusters >= 10 contiguous voxels.');
        
        tj = get_wh_image(t, j);
            if apply_mask_before_fdr
                tj = apply_mask(tj, mask);
            end
        tj = threshold(tj, .01, 'unc'); 
        
        r = region(tj, 'noverbose');
        r(cat(1, r.numVox) < 10) = [];                   % r = extent_threshold(r);
        [rpos, rneg] = table(r);       % add labels
        r = [rpos rneg];               % re-concatenate labeled regions

        % Montage of regions in table (plot and save)
        if ~isempty(r)
            o3 = montage(r, 'colormap', 'regioncenters');

            % Activate, name, and save figure - then close
            figtitle = sprintf('%s_01_unc_regions_%s_%s_%s', analysisname, names{j}, scaling_string, mask_string);
            region_fig_han = activate_figures(o3);
            if ~isempty(region_fig_han)
                set(region_fig_han{1}, 'Tag', figtitle);
                drawnow, snapnow;
                    if save_figures
                        plugin_save_figure;
                    end
                close(region_fig_han{1}), clear o3, clear figtitle
            else
                disp('Cannot find figure - Tag field was not set or figure was closed. Skipping save operation.');
            end

        end % loop over regions in results
        
    end % loop over regressors
   
end % loop over contrasts/conditions

